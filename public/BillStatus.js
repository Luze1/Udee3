function displayBillStatus(bills, filter) {
    const floorsContainer = document.getElementById("floors-container");
    floorsContainer.innerHTML = "";

    console.log("üîç ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å API:", bills); // ‡πÄ‡∏û‡∏¥‡πà‡∏° log ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö

    if (!bills || bills.length === 0) {
        floorsContainer.innerHTML = "<div class='no-results'>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏¥‡∏•</div>";
        return;
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏ö‡∏ö‡πÅ‡∏¢‡∏Å‡∏ï‡∏∂‡∏Å‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô TenentStatus
    displayBillsByDormitory(bills, filter);
}

function displayBillsByDormitory(bills, filter) {
    const floorsContainer = document.getElementById("floors-container");
    floorsContainer.innerHTML = "";

    console.log("üîç ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å API:", bills);

    if (!bills || bills.length === 0) {
        floorsContainer.innerHTML = "<div class='no-results'>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏¥‡∏•</div>";
        return;
    }

    const dormitories = {};

    bills.forEach(bill => {
        if (filter && bill.bill_status !== filter) {
            return;
        }

        const dormName = getDormitoryName(bill.dormitory_id);
        const floor = bill.floor || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏±‡πâ‡∏ô";

        if (!dormitories[dormName]) {
            dormitories[dormName] = {};
        }
        if (!dormitories[dormName][floor]) {
            dormitories[dormName][floor] = [];
        }
        dormitories[dormName][floor].push(bill);
    });

    Object.keys(dormitories).sort().forEach(dormName => {
        const dormitorySection = document.createElement("div");
        dormitorySection.classList.add("dormitory-section");
        dormitorySection.innerHTML = `<h2 class="dormitory-title">${dormName}</h2>`;

        const floors = Object.keys(dormitories[dormName]).sort((a, b) => parseInt(a) - parseInt(b));

        floors.forEach(floor => {
            const floorSection = document.createElement("div");
            floorSection.classList.add("floor-section");
            floorSection.innerHTML = `
                <div class="floor-title">‡∏ä‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà ${floor}</div>
                <div class="room-container"></div>
            `;

            const roomContainer = floorSection.querySelector(".room-container");
            const billsInFloor = dormitories[dormName][floor];

            billsInFloor.sort((a, b) => a.room_id.localeCompare(b.room_id));

            billsInFloor.forEach(bill => {
                const roomLink = document.createElement("a");
                roomLink.href = `/BillDetail?room_id=${bill.room_id}`;

                const roomCard = document.createElement("div");
                roomCard.classList.add("room-card");
                roomCard.innerHTML = `<strong>${bill.room_id}</strong><br><span>${bill.bill_status}</span>`;

                // ‡πÄ‡∏û‡∏¥‡πà‡∏° class ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏¥‡∏•‡πÉ‡∏ô room-card
                switch (bill.bill_status) {
                    case "‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏•‡πâ‡∏ß":
                        roomCard.classList.add("complete");
                        break;
                    case "‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö":
                        roomCard.classList.add("paid");
                        break;
                    case "‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞":
                        roomCard.classList.add("kangjai");
                        break;
                    case "‡∏ö‡∏¥‡∏•‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå":
                        roomCard.classList.add("incomplete");
                        break;
                    case "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏¥‡∏•":
                        roomCard.classList.add("no-data");
                        break;
                }

                roomLink.appendChild(roomCard);
                roomContainer.appendChild(roomLink);
            });

            dormitorySection.appendChild(floorSection);
        });

        floorsContainer.appendChild(dormitorySection);
    });
}

function getDormitoryName(dormId) {
    switch (dormId) {
        case 'D001': return '‡∏ï‡∏∂‡∏Å A';
        case 'D002': return '‡∏ï‡∏∂‡∏Å B';
        case 'D003': return '‡∏ï‡∏∂‡∏Å C';
        default: return `‡∏ï‡∏∂‡∏Å ${dormId}`;
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏ö‡∏¥‡∏•
function loadBills(statusFilter) {
    axios.get('/api/bill-status', { params: { status: statusFilter } })
        .then(response => {
            console.log("üîç ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å API:", response.data); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            displayBillsByDormitory(response.data, statusFilter);
        })
        .catch(error => {
            console.error("‚ùå Error:", error);
            const floorsContainer = document.getElementById("floors-container");
            floorsContainer.innerHTML = "<div class='error-message'>‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</div>";
        });
}

// ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î
document.addEventListener('DOMContentLoaded', () => {
    loadBills(''); // ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏∏‡∏Å‡∏ö‡∏¥‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤
});

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°
document.getElementById('searchBillBtn').addEventListener('click', () => {
    const statusFilter = document.getElementById('billStatusFilter').value;
    loadBills(statusFilter);
});

// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏≠‡∏ö‡∏ö‡∏¥‡∏•
document.getElementById('billingCycle').addEventListener('change', () => {
    const statusFilter = document.getElementById('billStatusFilter').value;
    const month = document.getElementById('billingCycle').value || '‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°/2025';
    document.getElementById('selectedMonth').textContent = month;

    loadBills(statusFilter, month);
});

document.addEventListener("DOMContentLoaded", function () {
    const billingCycle = document.getElementById("billingCycle");
    const selectedMonthLabel = document.getElementById("selectedMonth");
    const billStatusFilter = document.getElementById("billStatusFilter");
    const searchBillBtn = document.getElementById("searchBillBtn");

    function fetchBillsByMonth(month) {
        axios.get(`/api/bills?month=${month}`)
            .then(response => {
                const bills = response.data;
                updateBillDisplay(bills);
            })
            .catch(error => console.error("‚ùå Error fetching bills:", error));
    }

    function updateBillDisplay(bills) {
        const container = document.getElementById("floors-container");
        container.innerHTML = "";
        bills.forEach(bill => {
            const billDiv = document.createElement("div");
            billDiv.classList.add("bill-item");
            billDiv.innerHTML = `<p>${bill.room_id} - ${bill.bill_status}</p>`;
            container.appendChild(billDiv);
        });
    }

    billingCycle.addEventListener("change", function () {
        const selectedMonth = billingCycle.value;
        selectedMonthLabel.textContent = selectedMonth;
        fetchBillsByMonth(selectedMonth);
    });

    searchBillBtn.addEventListener("click", function () {
        const selectedMonth = billingCycle.value;
        const status = billStatusFilter.value;
        axios.get(`/api/bills?month=${selectedMonth}&status=${status}`)
            .then(response => {
                updateBillDisplay(response.data);
            })
            .catch(error => console.error("‚ùå Error fetching filtered bills:", error));
    });

    // ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≠‡∏ö‡∏ö‡∏¥‡∏•‡πÅ‡∏£‡∏Å
    fetchBillsByMonth(billingCycle.value);
});


document.addEventListener("DOMContentLoaded", function () {
    const billingCycleDropdown = document.getElementById("billingCycle");
    const selectedMonthText = document.getElementById("selectedMonth");

    function loadBillMonths() {
        axios.get("/api/billing-cycles")
            .then(response => {
                billingCycleDropdown.innerHTML = ""; // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå dropdown ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

                response.data.forEach(month => {
                    const option = document.createElement("option");
                    option.value = month;
                    option.textContent = month;
                    billingCycleDropdown.appendChild(option);
                });

                // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡∏î‡∏µ‡∏ü‡∏≠‡∏•‡∏ï‡πå‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤
                if (response.data.length > 0) {
                    billingCycleDropdown.value = response.data[0];
                    selectedMonthText.textContent = response.data[0];
                    loadBills("", response.data[0]); // ‡πÇ‡∏´‡∏•‡∏î‡∏ö‡∏¥‡∏•‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÅ‡∏£‡∏Å
                }
            })
            .catch(error => console.error("‚ùå Error loading bill months:", error));
    }

    billingCycleDropdown.addEventListener("change", function () {
        const selectedMonth = this.value;
        selectedMonthText.textContent = selectedMonth;
        loadBills("", selectedMonth);
    });

    loadBillMonths();
});

function refreshBillStatus() {
    axios.get('/api/bill-status')
        .then(response => {
            console.log("üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏¥‡∏•‡πÉ‡∏´‡∏°‡πà:", response.data);
            displayBillsByDormitory(response.data);
        })
        .catch(error => {
            console.error("‚ùå Error:", error);
        });
}

function loadBills(statusFilter) {
    axios.get('/api/bill-status', { params: { status: statusFilter } })
        .then(response => {
            console.log("üîç ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å API:", response.data);
            displayBillsByDormitory(response.data, statusFilter);
        })
        .catch(error => {
            console.error("‚ùå Error:", error);
            const floorsContainer = document.getElementById("floors-container");
            floorsContainer.innerHTML = "<div class='error-message'>‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</div>";
        });
}


